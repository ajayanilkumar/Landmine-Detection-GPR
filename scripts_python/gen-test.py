#!/Users/anilrao/miniforge3/envs/gprMax/bin/python3

from __future__ import division
import argparse
import datetime
import random
import os
import numpy as np
import math
import time


# Global variables (and default values)
#
filesToBeCreated = 0
outputDir = "."

#
# Constants
#
NL = "\n"

# Parse command-line arguments
#
parser = argparse.ArgumentParser(description="Generate *.in input files for gprmax")
parser.add_argument('-n', '--name',metavar='name', required=True,
                    dest='name', action='store',
                    help='Model name')

parser.add_argument('-f','--frequency',help='Choice of GPR frequency (500MHz or 1000MHz)',
                    default=0.5,type=float)

parser.add_argument('-w', '--with', dest='filesWith', action='store',
                    help='Number of WITH files to be created')

parser.add_argument('-x', '--without', dest='filesWithout', action='store',
                    help='Number of WITHOUT files to be created')

parser.add_argument('-mt','--mine_type', metavar='mine_type', dest="mine_type",
                    action="store", help='enter mine type')

parser.add_argument('-o', '--out', dest='outputDir', action='store',
                    help='output directory')

parser.add_argument('-r','--rough',dest='rough_surface',action='store',
                    help='define B-scan with rough surface',required=True)

parser.add_argument('-fi', '--fileid', dest='fileid', action='store',
                    help='id of file')

args = parser.parse_args()

#
# Cannot use --with and --without switches at the same time
# (see 'NOTE' in main comments above)
#
if (args.filesWith) and (args.filesWithout):
    print ("ERROR -> Cannot use --with and --without switches at same time.")
    exit(0)

# Cannot use --without and --mine_type switches at the same
# time for obvious reasons
#
if (args.filesWithout) and (args.mine_type):
    print ("Error -> Cannot use --without and --mine_type at the same time.")
    exit(0)

if (args.filesWith) and not (args.mine_type):
    print ("Error -> Please include --mine_type switch")
    exit(0)

if (args.filesWith):
    filesToBeCreated = int(args.filesWith)

else:
    filesToBeCreated = int(args.filesWithout)

if (args.outputDir):
    outputDir = args.outputDir

if (args.fileid):
    fileid = args.fileid+"_"

rough_tag = str((args.rough_surface))

domainDepthVal = 1.0
domainDistanceVal = 2.0      



for fileCount in range(0, filesToBeCreated):

    fname = args.name

    if (args.fileid):
        fname = fname + fileid
    else:
        fname = fname + str(fileCount)

    X = 0.5
    Y = 0.5
    Z = 0.002
    CYLINDER_X = 0.17
    CYLINDER_Y = 0.080
    diameter = 0.08

    clay =  round(random.uniform(0.1, 0.9),1)
    sand = round(random.uniform(0.1, 0.9),1)

    f = open(outputDir + "/" + fname + ".in", 'w+')
    f.write("--Generated by gpr-gen-new.py: " + str(datetime.datetime.now()) + NL)
    f.write("#title: " + fname + ".in" + NL)
    f.write("#domain: " + str(X) + " " + str(Y) + " " + str(Z) + NL)
    f.write("#dx_dy_dz: 0.002 0.002 0.002" + NL)
    f.write("#time_window: 12e-9" + NL)
    f.write("#soil_peplinski: " + str(sand) + " " + str(clay) + " " + "2.0 2.66 0.001 0.25 my_soil" + NL)
    f.write("#fractal_box: 0 0 0 " + str(X) + " " + str(0.75*Y) + " " + str(Z) + " " + "1.5 1 1 1 50 my_soil my_soil_box" + NL)
    if (args.mine_type):
        mine_type = args.mine_type
        if mine_type == "anti_tank":
            f.write("#cylinder: " + str(CYLINDER_X) + " " + str(CYLINDER_Y) + " 0 " + str(CYLINDER_X) + " " + str(CYLINDER_Y) + " " + str(Z) + " " + str(diameter) + " pec y" + NL)
    else:
        continue
    f.write("#rx: 0.080 0.170 0" + NL)
    f.write("#src_steps: 0.002 0.0 0" + NL)
    f.write("rx_steps: 0.002 0.0 0" + NL)
    f.write("#waveform: ricker 1 " + str(args.frequency) + "e9"+ " my_ricker" + NL)
    f.write("#hertzian_dipole: z 0.040 0.170 0 my_ricker" + NL) 


 
    # Soviet TM-46 anti-tank mine (approx)
    
    #
    # add rough surface
    #
    if rough_tag == 'y':
        f.write("#add_surface_roughness: 0 0.7 0 2.0 0.7 0.001 2.0 1 1 0.65 0.71 soil_box" + NL)
    elif rough_tag == 'n':
        continue
    #
    # Do we add a landmine in this image?
    # If so then we add it to a random x, y location
    # within the domain.
    # Call mine_generation function
    #
        #print(mine_type)
        # add noise
        #add_noise(150)
        #mine_generation(mine_type,f)
        #add_noise(150)

    # geometry file
    #f.write("#geometry_view: 0 0 0 2 1 0.001 0.002 0.002 0.001 mine_test n")

    #
    # Close the file when finished.
    #
    f.close();
